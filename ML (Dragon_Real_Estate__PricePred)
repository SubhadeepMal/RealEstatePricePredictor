#DRAGON REAL ESTATE - PRICE PREDICTOR:

import numpy as np
import pandas as pd

housing=pd.read_csv(r"C:\Users\ADMIN\data.csv")

#housing.head()

#housing.info()

#housing['CHAS'].value_counts()

#housing.describe()

import matplotlib.pyplot as plt

#housing.hist(bins=50, figsize=(20, 15))

##TRAIN-TEST SPLITTING

#Train_test_split using Functions
def split_train_test(data,test_ratio):
    np.random.seed(42)
    #The numpy.random.seed() function takes an integer value to generate the same sequence of random numbers.
    shuffled=np.random.permutation(len(data))
    #print(shuffled)
    test_set_size=int(len(data)*test_ratio)
    test_indices=shuffled[:test_set_size]
    train_indices=shuffled[test_set_size:]
    return data.iloc[train_indices], data.iloc[test_indices]

train_set, test_set= split_train_test(housing,0.2) 

#print("ROWS IN TRAIN SET: ",len(train_set),"\n ROWS IN TEST SET: ", len(test_set))

#Train_test_split using sklearn
from sklearn.model_selection import train_test_split
train_set,test_set=train_test_split(housing, test_size=0.2, random_state=42)
print("ROWS IN TRAIN SET: ",len(train_set),"\n ROWS IN TEST SET: ", len(test_set))

#To get 0's and 1's equally from CHAS we use StratifiedShuffleSplit
from sklearn.model_selection import StratifiedShuffleSplit
split=StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)
for train_index, test_index in split.split(housing, housing['CHAS']):
    strat_train_set=housing.loc[train_index]
    strat_test_set=housing.loc[test_index]
    

strat_train_set['CHAS'].value_counts()

strat_test_set['CHAS'].value_counts()

## LOKING FOR CORRELATIONS


corr_matrix= housing.corr()
#print(corr_matrix)

corr_matrix['MEDV'].sort_values(ascending=False)

from pandas.plotting import scatter_matrix
attributes=['MEDV','RM','ZN','LSTAT']
scatter_matrix(housing[attributes],figsize=(12,8))

## Trying out attribute combination

#example
housing['TAXRM']=housing['TAX']/housing['RM']

#housing['TAXRM']
corr_matrix= housing.corr()
corr_matrix['MEDV'].sort_values(ascending=False)

#housing.plot(kind='scatter',x='TAXRM',y='MEDV',alpha=0.8)

housing=strat_test_set.drop("MEDV",axis=1)
housing_labels=strat_test_set["MEDV"].copy()

## Missing Attributes

# To take care of missing attributes (if any ), you have three options:
# 1. Get rid of the missing data points
# 2. Get rid of the whole attribute
# 3. Set the value to some value(0/mean/median)

# for the 3rd option(if any attribute has some na(missing) values:
#median=housing['RM'].median()
#housing['RM'].fillna(median)

#from sklearn.preprocessing import Imputer
from sklearn.impute import SimpleImputer
imputer=SimpleImputer(strategy='median')
imputer.fit(housing)

X=imputer.transform(housing)#Impute all missing values in X

housing_tr=pd.DataFrame(X, columns=housing.columns)
#housing_tr.describe()

## SCIKIT-LEARN DESIGN

'''Primarily, three types of objects:
1. Estimators- It estimates some parameter based on a dataset. eg: Imputer.It has a fit method and transform method.
                Fit method-Fits the dataset and calculates internal parameters.
2. Transformers- Transform method takes input and returns output based on the learnings from fit(). It also has a                           convenience fn called fit_transform() which fits and then transforms.
3. Predictors- LinearRegression model is an example of predictor. fit() and predict() are two common fn's. It also gives                     score() function which will evaluate the predictions.

## Feature Scalling

Primarily, two types of feature scalling methods:
    1.Min-Max scalling (Normalization)
        (Value-min)/(Max-min)
        Sklearn provides a class called MinMaxScaler for this
    2.Standardization 
        (value-mean)/Standard Deviation
        Sklearn provides a class called Standard Scaler for this
        
'''
## Creating a Pipeline

from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
mypipeline=Pipeline([
    ('imputer',SimpleImputer(strategy='median')),
    #add as many as wanted in the pipeline
    ('std_scaler', StandardScaler())
])

housing_num_tr=mypipeline.fit_transform(housing_tr)
housing_num_tr.shape

## Selecting a desired model for Dragon Real Estates 

from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
#model=LinearRegression()
#model= DecisionTreeRegressor()
model= RandomForestRegressor()
model.fit(housing_num_tr,housing_labels)

some_data=housing.iloc[:5]
some_labels=housing_labels.iloc[:5]

prepared_data=mypipeline.transform(some_data)

model.predict(prepared_data)

list(some_labels)

## Evaluating the model

from sklearn.metrics import mean_squared_error
housing_predictions=model.predict(housing_num_tr)
mse=mean_squared_error(housing_labels, housing_predictions)
rmse=np.sqrt(mse)

#print(mse)

#print(rmse)

## Using better evaluation technique: Cross Validation 

#1 2 3 4 5 6 7 8 9 10
from sklearn.model_selection import cross_val_score
scores=cross_val_score(model, housing_num_tr, housing_labels, scoring='neg_mean_squared_error', cv=10)
rmse_scores=np.sqrt(-scores)

#rmse_scores

def print_scores(scores):
    print("Scores: ", scores)
    print("Mean: ", scores.mean())
    print("Std: ", scores.std())

#print_scores(rmse_scores)

#from joblib import dump, load
#dump(model, 'Dragon.joblib')

## Testing the model on test data

X_test= strat_test_set.drop("MEDV", axis=1)
Y_test= strat_test_set["MEDV"].copy()
X_test_prepared= mypipeline.transform(X_test)
final_predictions= model.predict(X_test_prepared)
final_mse= mean_squared_error(Y_test, final_predictions)
final_rmse= np.sqrt(final_mse)

print("RMSE AT TEST DATA: ",final_rmse)


## MODEL USAGE

input=np.array([[-0.35082247, -44.49148409, 1.25183452, -0.27144836, -0.21067276,
        0.35869844, -0.25450164,  1.07434355, -0.91150503,  0.17974455,
       -1.08091535,  20.2995192 , -0.51357301]])
print("PREDICTION:")
print(model.predict(input))